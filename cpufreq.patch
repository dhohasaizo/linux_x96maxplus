commit 2c8a07f3391830f5592a217b181145cdd3cb73b2
Author: fk.luo <fk.luo@trigtop.com>
Date:   Mon Aug 26 14:28:44 2019 +0800

    Revert "cpufreq: cpufreq register notify for cluster0 [1/1]"
    
    This reverts commit 68a36a1938e8d7f54e32cdadd346d566c8f5b952.

diff --git a/drivers/amlogic/cpufreq/meson-cpufreq.c b/drivers/amlogic/cpufreq/meson-cpufreq.c
index 890b86f..1a3004c 100644
--- a/drivers/amlogic/cpufreq/meson-cpufreq.c
+++ b/drivers/amlogic/cpufreq/meson-cpufreq.c
@@ -261,12 +261,10 @@ static int meson_cpufreq_set_target(struct cpufreq_policy *policy,
 		}
 	}
 
-	if (cur_cluster == 0) {
-		freqs.old = freq_old / 1000;
-		freqs.new = freq_new / 1000;
-		cpufreq_freq_transition_begin(policy, &freqs);
-	}
+	freqs.old = freq_old / 1000;
+	freqs.new = freq_new / 1000;
 	/*scale clock frequency*/
+	cpufreq_freq_transition_begin(policy, &freqs);
 	ret = meson_cpufreq_set_rate(policy, cur_cluster,
 					freq_new / 1000);
 	if (ret) {
@@ -279,9 +277,7 @@ static int meson_cpufreq_set_target(struct cpufreq_policy *policy,
 		}
 		return ret;
 	}
-
-	if (cur_cluster == 0)
-		cpufreq_freq_transition_end(policy, &freqs, ret);
+	cpufreq_freq_transition_end(policy, &freqs, ret);
 	/*cpufreq down,change voltage after frequency*/
 	if (freq_new < freq_old) {
 		ret = meson_regulator_set_volate(cpu_reg, volt_old,
@@ -289,17 +285,12 @@ static int meson_cpufreq_set_target(struct cpufreq_policy *policy,
 		if (ret) {
 			pr_err("failed to scale volt %u %u down: %d\n",
 				volt_new, volt_tol, ret);
-			if (cur_cluster == 0) {
-				freqs.old = freq_new / 1000;
-				freqs.new = freq_old / 1000;
-				cpufreq_freq_transition_begin(policy, &freqs);
-			}
-
+			freqs.old = freq_new / 1000;
+			freqs.new = freq_old / 1000;
+			cpufreq_freq_transition_begin(policy, &freqs);
 			ret = meson_cpufreq_set_rate(policy, cur_cluster,
 				freq_old / 1000);
-			if (cur_cluster == 0)
-				cpufreq_freq_transition_end(policy,
-					&freqs, ret);
+			cpufreq_freq_transition_end(policy, &freqs, ret);
 		}
 	}
 
@@ -574,15 +565,13 @@ static int meson_cpufreq_init(struct cpufreq_policy *policy)
 
 	if (of_property_read_u32(np, "clock-latency", &transition_latency))
 		policy->cpuinfo.transition_latency = CPUFREQ_ETERNAL;
-	if (cur_cluster == 0) {
-		cpufreq_data->freq_transition = meson_cpufreq_notifier_block;
 
-		ret = cpufreq_register_notifier(&cpufreq_data->freq_transition,
-						CPUFREQ_TRANSITION_NOTIFIER);
-		if (ret) {
-			dev_err(cpu_dev, "failed to register cpufreq notifier!\n");
-			goto fail_cpufreq_unregister;
-		}
+	cpufreq_data->freq_transition = meson_cpufreq_notifier_block;
+	ret = cpufreq_register_notifier(&cpufreq_data->freq_transition,
+					CPUFREQ_TRANSITION_NOTIFIER);
+	if (ret) {
+		dev_err(cpu_dev, "failed to register cpufreq notifier!\n");
+		goto fail_cpufreq_unregister;
 	}
 
 	cpufreq_data->cpu_dev = cpu_dev;
@@ -611,7 +600,6 @@ static int meson_cpufreq_init(struct cpufreq_policy *policy)
 	dev_info(cpu_dev, "%s: CPU %d initialized\n", __func__, policy->cpu);
 	return ret;
 fail_cpufreq_unregister:
-	if (cur_cluster == 0)
 		cpufreq_unregister_notifier(&cpufreq_data->freq_transition,
 				CPUFREQ_TRANSITION_NOTIFIER);
 free_opp_table:
@@ -654,9 +642,6 @@ static int meson_cpufreq_exit(struct cpufreq_policy *policy)
 				policy->cpu);
 		return -ENODEV;
 	}
-	if (cur_cluster == 0)
-		cpufreq_unregister_notifier(&cpufreq_data->freq_transition,
-						CPUFREQ_TRANSITION_NOTIFIER);
 
 	if (policy->freq_table != NULL) {
 		dev_pm_opp_free_cpufreq_table(cpu_dev,
