diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-meson.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-meson.c
index ed459b9..72c646c 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-meson.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-meson.c
@@ -78,6 +78,7 @@ static void meson6_dwmac_fix_mac_speed(void *priv, unsigned int speed)
 	val = readl(dwmac->reg);
 
 	switch (speed) {
+		 pr_info("%s - %d : length =gu ++%u+++++\n", __func__, __LINE__,speed);
 	case SPEED_10:
 		val &= ~ETHMAC_SPEED_100;
 		break;
@@ -312,7 +313,6 @@ static void __iomem *g12a_network_interface_setup(struct platform_device *pdev)
 	u32 internal_phy = 0;
 	int auto_cali_idx = -1;
 	is_internal_phy = 0;
-
 	pr_debug("g12a_network_interface_setup\n");
 	/*map PRG_ETH_REG */
 	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "eth_cfg");
@@ -328,6 +328,7 @@ static void __iomem *g12a_network_interface_setup(struct platform_device *pdev)
 	}
 
 	REG_ETH_reg0_addr = addr;
+
 	pr_info(" REG0:Addr = %p\n", REG_ETH_reg0_addr);
 
 	/*map ETH_PLL address*/
@@ -596,8 +597,9 @@ static int meson6_dwmac_probe(struct platform_device *pdev)
 	}
 #endif
 	plat_dat->bsp_priv = dwmac;
+	pr_info("%s - %d : length =gu ++%d+++++\n", __func__, __LINE__,plat_dat->max_speed);
 	plat_dat->fix_mac_speed = meson6_dwmac_fix_mac_speed;
-
+	pr_info("%s - %d : length =gu11 ++%d+++++\n", __func__, __LINE__,plat_dat->max_speed);
 	ret = stmmac_dvr_probe(&pdev->dev, plat_dat, &stmmac_res);
 	if (ret)
 		goto err_remove_config_dt;
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index ff96edb..2481176 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -733,6 +733,7 @@ static void stmmac_adjust_link(struct net_device *dev)
 	int new_state = 0;
 	unsigned int fc = priv->flow_ctrl, pause_time = priv->pause;
 
+	pr_info("%s - %d : length =gu ++%d+++++%d+++++++%d+++++%d\n", __func__, __LINE__,priv->oldduplex,phydev->duplex,phydev->speed,priv->speed);
 	if (phydev == NULL)
 		return;
 
@@ -743,6 +744,7 @@ static void stmmac_adjust_link(struct net_device *dev)
 
 		/* Now we make sure that we can be in full duplex mode.
 		 * If not, we operate in half-duplex mode. */
+	pr_info("%s - %d : length =gu ++%d+++++%d+++++++%d+++++%d\n", __func__, __LINE__,priv->oldduplex,phydev->duplex,phydev->speed,priv->speed);
 		if (phydev->duplex != priv->oldduplex) {
 			new_state = 1;
 			if (!(phydev->duplex))
@@ -752,10 +754,12 @@ static void stmmac_adjust_link(struct net_device *dev)
 			priv->oldduplex = phydev->duplex;
 		}
 		/* Flow Control operation */
+	pr_info("%s - %d : length =gu11 ++%d+++++%d+++++++%d+++++%d\n", __func__, __LINE__,priv->oldduplex,phydev->duplex,phydev->speed,priv->speed);
+
 		if (phydev->pause)
 			priv->hw->mac->flow_ctrl(priv->hw, phydev->duplex,
 						 fc, pause_time);
-
+	pr_info("%s - %d : length =gu ++%d+++++%d\n", __func__, __LINE__,phydev->speed,priv->speed);
 		if (phydev->speed != priv->speed) {
 			new_state = 1;
 			switch (phydev->speed) {
@@ -771,7 +775,7 @@ static void stmmac_adjust_link(struct net_device *dev)
 					   (priv->plat->has_gmac4))) {
 					ctrl |= priv->hw->link.port;
 					if (phydev->speed == SPEED_100) {
-						ctrl |= priv->hw->link.speed;
+					ctrl |= priv->hw->link.speed;
 					} else {
 						ctrl &= ~(priv->hw->link.speed);
 					}
@@ -788,6 +792,7 @@ static void stmmac_adjust_link(struct net_device *dev)
 			}
 
 			priv->speed = phydev->speed;
+	pr_info("%s - %d : length =gu44444 ++%d+++++%d\n", __func__, __LINE__,phydev->speed,priv->speed);
 		}
 
 		writel(ctrl, priv->ioaddr + MAC_CTRL_REG);
@@ -802,11 +807,13 @@ static void stmmac_adjust_link(struct net_device *dev)
 		priv->speed = 0;
 		priv->oldduplex = -1;
 	}
-
+	
+	pr_info("%s - %d : length =gu44444 ++%d+++++%d+++phydev->is_pseudo_fixed_link：++%d\n", __func__, __LINE__,phydev->speed,priv->speed,phydev->is_pseudo_fixed_link);
 	if (new_state && netif_msg_link(priv))
 		phy_print_status(phydev);
 
 	spin_unlock_irqrestore(&priv->lock, flags);
+	pr_info("%s - %d : length =gu44444 ++%d+++++%d+++phydev->qqqq123is_pseudo_fixed_link：++%d\n", __func__, __LINE__,phydev->speed,priv->speed,phydev->is_pseudo_fixed_link);
 
 	if (phydev->is_pseudo_fixed_link)
 		/* Stop PHY layer to call the hook to adjust the link in case
@@ -818,6 +825,10 @@ static void stmmac_adjust_link(struct net_device *dev)
 		 * Never called in case of fixed_link.
 		 */
 		priv->eee_enabled = stmmac_eee_init(priv);
+
+
+
+	pr_info("%s - %d : length =gu44444 ++%d+++++%d+++phydev->qqqq123is_pseudo_fixed_link：++%d+priv->eee_enabled:+%d\n", __func__, __LINE__,phydev->speed,priv->speed,phydev->is_pseudo_fixed_link,priv->eee_enabled);
 }
 
 /**
@@ -830,7 +841,8 @@ static void stmmac_adjust_link(struct net_device *dev)
 static void stmmac_check_pcs_mode(struct stmmac_priv *priv)
 {
 	int interface = priv->plat->interface;
-
+	
+	pr_info("%s - %d : length =gu44444interface ++%d\n", __func__, __LINE__,interface);
 	if (priv->dma_cap.pcs) {
 		if ((interface == PHY_INTERFACE_MODE_RGMII) ||
 		    (interface == PHY_INTERFACE_MODE_RGMII_ID) ||
@@ -853,6 +865,7 @@ static void stmmac_check_pcs_mode(struct stmmac_priv *priv)
  *  Return value:
  *  0 on success
  */
+
 static int stmmac_init_phy(struct net_device *dev)
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
@@ -860,10 +873,12 @@ static int stmmac_init_phy(struct net_device *dev)
 	char phy_id_fmt[MII_BUS_ID_SIZE + 3];
 	char bus_id[MII_BUS_ID_SIZE];
 	int interface = priv->plat->interface;
+//	int max_speed = 100;
 	int max_speed = priv->plat->max_speed;
 	priv->oldlink = 0;
 	priv->speed = 0;
 	priv->oldduplex = -1;
+	pr_info("%s - %d : length =gu44444 ++%d+%d++++%d++cur_rx:+%u+++dirty_rx:%u++hwts_tx_en:%d+tx_count_frames:%u+tx_coal_frames:%u+tx_coal_timer:%u\n", __func__, __LINE__,interface,priv->plat->max_speed,priv->plat->mac_port_sel_speed,priv->cur_rx,priv->dirty_rx,priv->hwts_tx_en,priv->tx_count_frames,priv->tx_coal_frames,priv->tx_coal_timer);
 
 	if (priv->plat->phy_node) {
 		phydev = of_phy_connect(dev, priv->plat->phy_node,
@@ -889,6 +904,7 @@ static int stmmac_init_phy(struct net_device *dev)
 		return PTR_ERR(phydev);
 	}
 
+	pr_info("%s - %d : length123 =gu44444%d+%d ++%d+%d++++%d++cur_rx:+%u+++dirty_rx:%u++hwts_tx_en:%d+tx_count_frames:%u+tx_coal_frames:%u+tx_coal_timer:%u\n", __func__, __LINE__,PHY_INTERFACE_MODE_MII,PHY_INTERFACE_MODE_RMII,interface,priv->plat->max_speed,priv->plat->mac_port_sel_speed,priv->cur_rx,priv->dirty_rx,priv->hwts_tx_en,priv->tx_count_frames,priv->tx_coal_frames,priv->tx_coal_timer);
 	/* Stop Advertising 1000BASE Capability if interface is not GMII */
 	if ((interface == PHY_INTERFACE_MODE_MII) ||
 	    (interface == PHY_INTERFACE_MODE_RMII) ||
@@ -919,7 +935,8 @@ static int stmmac_init_phy(struct net_device *dev)
 		 " Link = %d\n", dev->name, phydev->phy_id, phydev->link);
 
 	priv->phydev = phydev;
-
+	pr_info("%s - %d : length123 =gu44444 ++%d+%d++++%d++cur_rx:+%u+++dirty_rx:%u++hwts_tx_en:%d+tx_count_frames:%u+tx_coal_frames:%u+tx_coal_timer:%u\n", __func__, __LINE__,interface,priv->plat->max_speed,priv->plat->mac_port_sel_speed,priv->cur_rx,priv->dirty_rx,priv->hwts_tx_en,priv->tx_count_frames,priv->tx_coal_frames,priv->tx_coal_timer);
+	
 	return 0;
 }
 
diff --git a/drivers/net/phy/phy.c b/drivers/net/phy/phy.c
index 4d21764..a0cbe3c7 100644
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@ -281,6 +281,7 @@ static inline bool phy_check_valid(int speed, int duplex, u32 features)
 
 	idx = phy_find_valid(phy_find_setting(speed, duplex), features);
 
+	pr_info("%s - %d : length =5idx ++%d++++:%u\n", __func__, __LINE__,settings[idx].speed,idx);
 	return settings[idx].speed == speed && settings[idx].duplex == duplex &&
 		(settings[idx].setting & features);
 }
@@ -304,8 +305,9 @@ static void phy_sanitize_settings(struct phy_device *phydev)
 
 	idx = phy_find_valid(phy_find_setting(phydev->speed, phydev->duplex),
 			features);
-
+pr_info("%s - %d : length =4idx ++%u\n", __func__, __LINE__,idx);
 	phydev->speed = settings[idx].speed;
+	pr_info("%s - %d : length =3 ++%d\n", __func__, __LINE__,phydev->speed);
 	phydev->duplex = settings[idx].duplex;
 }
 
@@ -349,7 +351,7 @@ int phy_ethtool_sset(struct phy_device *phydev, struct ethtool_cmd *cmd)
 	phydev->autoneg = cmd->autoneg;
 
 	phydev->speed = speed;
-
+pr_info("%s - %d : length =2 ++%d\n", __func__, __LINE__,phydev->speed);
 	phydev->advertising = cmd->advertising;
 
 	if (AUTONEG_ENABLE == cmd->autoneg)
@@ -403,7 +405,7 @@ int phy_ethtool_ksettings_set(struct phy_device *phydev,
 	phydev->autoneg = autoneg;
 
 	phydev->speed = speed;
-
+	pr_info("%s - %d : length =1 ++%d\n", __func__, __LINE__,phydev->speed);
 	phydev->advertising = advertising;
 
 	if (autoneg == AUTONEG_ENABLE)
@@ -511,10 +513,14 @@ int phy_mii_ioctl(struct phy_device *phydev, struct ifreq *ifr, int cmd)
 						phydev->duplex = DUPLEX_FULL;
 					else
 						phydev->duplex = DUPLEX_HALF;
-					if (val & BMCR_SPEED1000)
+					if (val & BMCR_SPEED1000){
 						phydev->speed = SPEED_1000;
-					else if (val & BMCR_SPEED100)
+					       pr_info("%s - %d : length =BMCR_SPEED1000 ++%d\n", __func__, __LINE__,phydev->speed);
+					}
+					else if (val & BMCR_SPEED100){
 						phydev->speed = SPEED_100;
+					pr_info("%s - %d : length =BMCR_SPEED100 ++%d\n", __func__, __LINE__,phydev->speed);
+					}
 					else phydev->speed = SPEED_10;
 				}
 				else {
diff --git a/lib/devres.c b/lib/devres.c
index cb1464c..3397493 100644
--- a/lib/devres.c
+++ b/lib/devres.c
@@ -147,6 +147,7 @@ void __iomem *devm_ioremap_resource(struct device *dev, struct resource *res)
 	size = resource_size(res);
 	name = res->name ?: dev_name(dev);
 
+		dev_err(dev, "can't request region for+++++ resource %pR\n", res);
 	if (!devm_request_mem_region(dev, res->start, size, name)) {
 		dev_err(dev, "can't request region for resource %pR\n", res);
 		return IOMEM_ERR_PTR(-EBUSY);
