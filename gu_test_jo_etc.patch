diff --git a/arch/arm/boot/dts/amlogic/g12b_a311d_w400.dts b/arch/arm/boot/dts/amlogic/g12b_a311d_w400.dts
index c19f59c..0e0d783 100644
--- a/arch/arm/boot/dts/amlogic/g12b_a311d_w400.dts
+++ b/arch/arm/boot/dts/amlogic/g12b_a311d_w400.dts
@@ -1473,7 +1473,7 @@
 
 &pcie_A {
 	reset-gpio = <&gpio GPIOX_7 GPIO_ACTIVE_HIGH>;
-	status = "dissble";
+	status = "disable";
 };
 
 &saradc {
diff --git a/arch/arm/configs/meson64_a32_defconfig b/arch/arm/configs/meson64_a32_defconfig
index 4c584ba..7af081b 100644
--- a/arch/arm/configs/meson64_a32_defconfig
+++ b/arch/arm/configs/meson64_a32_defconfig
@@ -439,16 +439,24 @@ CONFIG_PPPOLAC=y
 CONFIG_PPPOPNS=y
 CONFIG_PPP_ASYNC=y
 CONFIG_USB_USBNET=y
+CONFIG_INPUT_JOYDEV=y
 CONFIG_ATH10K=m
 CONFIG_ATH10K_PCI=m
 CONFIG_INPUT_POLLDEV=y
 CONFIG_INPUT_EVDEV=y
 CONFIG_INPUT_JOYSTICK=y
-CONFIG_JOYSTICK_XPAD=y
+CONFIG_USB_ARCH_HAS_HCD=y
+CONFIG_USB=y
+CONFIG_JOYSTICK_XPAD=m
 CONFIG_JOYSTICK_XPAD_FF=y
 CONFIG_JOYSTICK_XPAD_LEDS=y
+CONFIG_JOYSTICK_GAMEPAD=m
 CONFIG_INPUT_MISC=y
+CONFIG_INPUT_IMS_PCU=y
 CONFIG_INPUT_UINPUT=y
+CONFIG_INPUT=y
+CONFIG_USB_HID=y
+CONFIG_GAMEPORT=m
 CONFIG_LEGACY_PTY_COUNT=32
 # CONFIG_DEVMEM is not set
 # CONFIG_DEVKMEM is not set
@@ -507,6 +515,9 @@ CONFIG_AMLOGIC_SND_SOC_CS42528=y
 CONFIG_AMLOGIC_SND_SOC=y
 CONFIG_AMLOGIC_SND_SOC_MESON=y
 CONFIG_AMLOGIC_SND_SOC_AUGE=y
+CONFIG_HID=y
+CONFIG_HID_PS3REMOTE=m
+CONFIG_HID_SONY=m
 CONFIG_AMLOGIC_SND_SPLIT_MODE=y
 CONFIG_AMLOGIC_SND_SOC_COMMON=y
 CONFIG_HIDRAW=y
diff --git a/drivers/hid/Kconfig b/drivers/hid/Kconfig
index 8eed456..5b43797 100644
--- a/drivers/hid/Kconfig
+++ b/drivers/hid/Kconfig
@@ -707,7 +707,14 @@ config HID_PRIMAX
 	---help---
 	Support for Primax devices that are not fully compliant with the
 	HID standard.
-
+config HID_PS3REMOTE
+       tristate "Sony PS3 BD Remote Control"
+       depends on HID
+       ---help---
+       Support for the Sony PS3 Blue-ray Disk Remote Control and Logitech
+       Harmony Adapter for PS3, which connect over Bluetooth.
+
+       Support for the 6-axis controllers is provided by HID_SONY.
 config HID_ROCCAT
 	tristate "Roccat device support"
 	depends on USB_HID
diff --git a/drivers/hid/Makefile b/drivers/hid/Makefile
index 86b2b57..5235f0c 100644
--- a/drivers/hid/Makefile
+++ b/drivers/hid/Makefile
@@ -78,6 +78,7 @@ hid-picolcd-$(CONFIG_DEBUG_FS)		+= hid-picolcd_debugfs.o
 
 obj-$(CONFIG_HID_PLANTRONICS)	+= hid-plantronics.o
 obj-$(CONFIG_HID_PRIMAX)	+= hid-primax.o
+obj-$(CONFIG_HID_PS3REMOTE)    += hid-ps3remote.o
 obj-$(CONFIG_HID_ROCCAT)	+= hid-roccat.o hid-roccat-common.o \
 	hid-roccat-arvo.o hid-roccat-isku.o hid-roccat-kone.o \
 	hid-roccat-koneplus.o hid-roccat-konepure.o hid-roccat-kovaplus.o \
diff --git a/drivers/input/input.c b/drivers/input/input.c
index 9e93736..bad1fab 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -1003,6 +1003,7 @@ static int input_attach_handler(struct input_dev *dev, struct input_handler *han
 	int error;
 
 	id = input_match_device(handler, dev);
+	pr_info("%s - %d : length = \n", __func__, __LINE__);
 	if (!id)
 		return -ENODEV;
 
@@ -2219,7 +2220,7 @@ int input_register_handler(struct input_handler *handler)
 {
 	struct input_dev *dev;
 	int error;
-
+	pr_info("%s - %d : length = \n", __func__, __LINE__);
 	error = mutex_lock_interruptible(&input_mutex);
 	if (error)
 		return error;
diff --git a/drivers/input/joydev.c b/drivers/input/joydev.c
index f3135ae..87808e5 100644
--- a/drivers/input/joydev.c
+++ b/drivers/input/joydev.c
@@ -1000,6 +1000,7 @@ static void joydev_disconnect(struct input_handle *handle)
 
 static int __init joydev_init(void)
 {
+	pr_info("%s - %d : length = \n", __func__, __LINE__);
 	return input_register_handler(&joydev_handler);
 }
 
diff --git a/drivers/input/joystick/Kconfig b/drivers/input/joystick/Kconfig
index 4215b53..de497a9 100644
--- a/drivers/input/joystick/Kconfig
+++ b/drivers/input/joystick/Kconfig
@@ -292,6 +292,12 @@ config JOYSTICK_XPAD
 	  To compile this driver as a module, choose M here: the
 	  module will be called xpad.
 
+config JOYSTICK_GAMEPAD
+	bool "X-Box gamepad rumble support"
+	depends on USB_ARCH_HAS_HCD
+	select USB
+	---help---
+	  Say Y here if you want to take advantage of xbox 360 rumble features.
 config JOYSTICK_XPAD_FF
 	bool "X-Box gamepad rumble support"
 	depends on JOYSTICK_XPAD && INPUT
diff --git a/drivers/input/joystick/Makefile b/drivers/input/joystick/Makefile
index 92dc0de..c058718 100644
--- a/drivers/input/joystick/Makefile
+++ b/drivers/input/joystick/Makefile
@@ -12,6 +12,7 @@ obj-$(CONFIG_JOYSTICK_ANALOG)		+= analog.o
 obj-$(CONFIG_JOYSTICK_COBRA)		+= cobra.o
 obj-$(CONFIG_JOYSTICK_DB9)		+= db9.o
 obj-$(CONFIG_JOYSTICK_GAMECON)		+= gamecon.o
+obj-y		:= gamepad.o
 obj-$(CONFIG_JOYSTICK_GF2K)		+= gf2k.o
 obj-$(CONFIG_JOYSTICK_GRIP)		+= grip.o
 obj-$(CONFIG_JOYSTICK_GRIP_MP)		+= grip_mp.o
diff --git a/drivers/input/joystick/xpad.c b/drivers/input/joystick/xpad.c
index f397a5b..3cb4885 100644
--- a/drivers/input/joystick/xpad.c
+++ b/drivers/input/joystick/xpad.c
@@ -127,6 +127,7 @@
 	u8 xtype;
 } xpad_device[] = {
 	{ 0x045e, 0x0202, "Microsoft X-Box pad v1 (US)", 0, XTYPE_XBOX },
+	{ 0x2563, 0x0575, "ShanWan PC/PS3/Android", 0, XTYPE_XBOX },
 	{ 0x045e, 0x0285, "Microsoft X-Box pad (Japan)", 0, XTYPE_XBOX },
 	{ 0x045e, 0x0287, "Microsoft Xbox Controller S", 0, XTYPE_XBOX },
 	{ 0x045e, 0x0289, "Microsoft X-Box pad v2 (US)", 0, XTYPE_XBOX },
@@ -312,6 +313,7 @@
 static struct usb_device_id xpad_table[] = {
 	{ USB_INTERFACE_INFO('X', 'B', 0) },	/* X-Box USB-IF not approved class */
 	XPAD_XBOX360_VENDOR(0x044f),		/* Thrustmaster X-Box 360 controllers */
+	XPAD_XBOX360_VENDOR(0x2563),		/* Thrustmaster X-Box 360 controllers */
 	XPAD_XBOX360_VENDOR(0x045e),		/* Microsoft X-Box 360 controllers */
 	XPAD_XBOXONE_VENDOR(0x045e),		/* Microsoft X-Box One controllers */
 	XPAD_XBOX360_VENDOR(0x046d),		/* Logitech X-Box 360 style controllers */
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
index c5d0142..a9a4492 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
@@ -701,9 +701,9 @@ static u32 stmmac_usec2riwt(u32 usec, struct stmmac_priv *priv)
 {
 	unsigned long clk = clk_get_rate(priv->stmmac_clk);
 
+	pr_info("%s - %d : length = %u:::%0lx\n", __func__, __LINE__,usec,clk);
 	if (!clk)
 		return 0;
-
 	return (usec * (clk / 1000000)) / 256;
 }
 
@@ -711,6 +711,7 @@ static u32 stmmac_riwt2usec(u32 riwt, struct stmmac_priv *priv)
 {
 	unsigned long clk = clk_get_rate(priv->stmmac_clk);
 
+	pr_info("%s - %d : length = %u:::%0lx\n", __func__, __LINE__,riwt,clk);
 	if (!clk)
 		return 0;
 
